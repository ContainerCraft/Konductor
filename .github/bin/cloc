#!/usr/bin/env bash
set -euo pipefail

# Script to count non-comment, non-docstring lines of Python code in Pulumi IaC
# Usage: ~$ cloc [-s] [-h]
#   -s: silent mode, only outputs the number
#   -h, --help: show this help message
# Description: Analyzes Python code in the ./pulumi directory, excluding:
#   - Comments (lines starting with #)
#   - Empty lines and whitespace
#   - Docstrings (multi-line strings between """ or ''')
#   - Inline comments (# after code)

# Function to print help message
print_help() {
    echo "Usage: cloc [-s] [-h]"
    echo "Count non-comment, non-docstring lines of Python code in Pulumi IaC"
    echo ""
    echo "Options:"
    echo "  -s        Silent mode, only outputs the number"
    echo "  -h        Show this help message"
    echo ""
    echo "Description:"
    echo "  Analyzes Python code in the ./pulumi directory, excluding:"
    echo "    - Comments (lines starting with #)"
    echo "    - Empty lines and whitespace"
    echo "    - Docstrings (multi-line strings between \"\"\" or ''')"
    echo "    - Inline comments (# after code)"
}

# Parse command line arguments
SILENT=false
while getopts "sh" opt; do
    case ${opt} in
        s)
            SILENT=true
            ;;
        h)
            print_help
            exit 0
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            print_help
            exit 1
            ;;
    esac
done

# Check for --help flag
for arg in "$@"; do
    if [ "$arg" == "--help" ]; then
        print_help
        exit 0
    fi
done

# Ensure we're in the root directory
cd "$(dirname "$0")/../.." || exit 1

# Verify pulumi directory exists
if [[ ! -d "./pulumi" ]]; then
    [[ "$SILENT" = false ]] && echo "Error: ./pulumi directory not found!" >&2
    exit 1
fi

[[ "$SILENT" = false ]] && echo "Analyzing Python code in Pulumi Infrastructure as Code (IaC) directory..."
[[ "$SILENT" = false ]] && echo "Excluding comments, docstrings, and blank lines..."

# Count lines across all Python files
total_lines=$(find ./pulumi -name "*.py" -type f -exec awk '
    BEGIN {
        in_docstring = 0
        count = 0
    }
    {
        # Store original line for inline comment handling
        original = $0
        # Trim leading/trailing whitespace
        line = $0
        gsub(/^[ \t]+|[ \t]+$/, "", line)

        # Skip empty lines
        if (line == "") { next }

        # Skip full comment lines
        if (line ~ /^#/) { next }

        # Handle triple-quoted docstrings (both single and double quotes)
        if (line ~ /^"""/ || line ~ /"""$/ || line ~ /^'\'''\'''\''/ || line ~ /'\'''\'''\''$/) {
            in_docstring = !in_docstring
            next
        }
        if (in_docstring) { next }

        # Remove inline comments
        sub(/#.*$/, "", original)
        # Trim whitespace after removing inline comment
        gsub(/^[ \t]+|[ \t]+$/, "", original)
        # Skip if line becomes empty after removing inline comment
        if (original == "") { next }

        # Count this line
        count++
    }
    END { print count }
' {} \; | awk '{total += $1} END {print total}')

# Verify we got a valid number
if [[ ! "$total_lines" =~ ^[0-9]+$ ]]; then
    [[ "$SILENT" = false ]] && echo "Error: Failed to count lines properly!" >&2
    exit 1
fi

if [[ "$SILENT" = true ]]; then
    echo "$total_lines"
else
    echo "Total lines of Python code: ${total_lines}"
fi
